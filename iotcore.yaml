Description: Ejemplo para soluci√≥n IoT
Parameters: 

  pNameStream: 
    Description: Nombre de Stream
    Type: String
    Default: StreamIoT
    
  pNameTableDynamo: 
    Description: Nombre de tabla DynammoDB
    Type: String
    Default: SensorIoT
    
  pNameRule:
    Description: Nombre de la regla que lee el topic
    Type: String
    Default: RuleIoT
  
  pNameS3Bucket:
    Description: Nombre del bucket S3
    Type: String
    Default: bucketiot
Resources:

  rKinesisStream: 
      Type: AWS::Kinesis::Stream 
      Properties: 
        Name: !Ref pNameStream
        RetentionPeriodHours: 24 
        ShardCount: 1
          
  rDynamoDBTable: 
      Type: AWS::DynamoDB::Table
      Properties: 
          TableName: !Ref pNameTableDynamo
          AttributeDefinitions: 
          - 
            AttributeName: "id"
            AttributeType: "S"
          - 
            AttributeName: "device"
            AttributeType: "S"
          KeySchema: 
          - 
            AttributeName: "id"
            KeyType: "HASH"
          - 
            AttributeName: "device"
            KeyType: "RANGE"
          BillingMode : PAY_PER_REQUEST

  rS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
      BucketName: !Ref pNameS3Bucket

  rS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref pNameS3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - 's3:PutObject'
          Effect: Allow
          Resource: !Join
          - ''
          - - !GetAtt rS3Bucket.Arn
            - /*
          Principal: '*'

  rTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: !Ref pNameRule
      TopicRulePayload:
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: false
        Sql: SELECT * FROM 'iot-sensor/values'
        Actions:
        - Kinesis:
            PartitionKey: ${newuuid()}
            RoleArn: !GetAtt rRoleIoTKinesis.Arn
            StreamName: !Ref pNameStream
        - DynamoDBv2:
            RoleArn: !GetAtt rRoleIoTDynamoDB.Arn
            PutItem: 
              TableName: !Ref rDynamoDBTable
        - S3:
            BucketName: !Ref pNameS3Bucket
            Key:  ${topic()}/${timestamp()}
            RoleArn: !GetAtt rRoleIoTS3.Arn

  rRoleIoTDynamoDB:
      Type: AWS::IAM::Role
      Properties:
        RoleName: roleWriteDynamoDB
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - iot.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - dynamodb:PutItem
              Resource: 
              - !GetAtt rDynamoDBTable.Arn
              
  rRoleIoTKinesis:
      Type: AWS::IAM::Role
      Properties:
        RoleName: roleWriteKinesis
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - iot.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - kinesis:DescribeStream
              - kinesis:GetShardIterator
              - kinesis:GetRecords
              - kinesis:PutRecord
              Resource: 
              - !GetAtt rKinesisStream.Arn
  rRoleIoTS3:
      Type: AWS::IAM::Role
      Properties:
        RoleName: roleWriteS3
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - iot.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:PutObject
              - s3:DeleteObject
              - s3:GetObject
              - s3:ListBucket
              - s3:RestoreObject
              - s3:PutObjectAcl
              Resource: 
              - !GetAtt rS3Bucket.Arn